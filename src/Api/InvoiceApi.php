<?php
/**
 * InvoiceApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Účto+ API
 *
 * Production environment is located at `https://api.moje.uctoplus.sk/production/`.  Sandbox environment is located at `https://api.moje.uctoplus.sk/sandbox/`.  All communication with API is encoded in UTF-8. This REST API is based on Open API v3 standard. For help with implementation or access to the test environment please contact our helpdesk
 *
 * The version of the OpenAPI document: 3.2.0
 * Contact: helpdesk@uctoplus.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.1.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Uctoplus\API\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Uctoplus\API\ApiException;
use Uctoplus\API\Configuration;
use Uctoplus\API\HeaderSelector;
use Uctoplus\API\ObjectSerializer;

/**
 * InvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'addInvoice' => [
            'application/json',
        ],
        'addPaymentToInvoice' => [
            'application/json',
        ],
        'getInvoice' => [
            'application/json',
        ],
        'sendInvoice' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addInvoice
     *
     * addInvoice
     *
     * @param  \Uctoplus\API\Models\AddInvoiceRequest $add_invoice_request Invoice or Credit Note (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR
     */
    public function addInvoice($add_invoice_request, $except = null, string $contentType = self::contentTypes['addInvoice'][0])
    {
        list($response) = $this->addInvoiceWithHttpInfo($add_invoice_request, $except, $contentType);
        return $response;
    }

    /**
     * Operation addInvoiceWithHttpInfo
     *
     * addInvoice
     *
     * @param  \Uctoplus\API\Models\AddInvoiceRequest $add_invoice_request Invoice or Credit Note (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR, HTTP status code, HTTP response headers (array of strings)
     */
    public function addInvoiceWithHttpInfo($add_invoice_request, $except = null, string $contentType = self::contentTypes['addInvoice'][0])
    {
        $request = $this->addInvoiceRequest($add_invoice_request, $except, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Uctoplus\API\Models\AddInvoice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\AddInvoice200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\AddInvoice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\AddInvoice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addInvoiceAsync
     *
     * addInvoice
     *
     * @param  \Uctoplus\API\Models\AddInvoiceRequest $add_invoice_request Invoice or Credit Note (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceAsync($add_invoice_request, $except = null, string $contentType = self::contentTypes['addInvoice'][0])
    {
        return $this->addInvoiceAsyncWithHttpInfo($add_invoice_request, $except, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addInvoiceAsyncWithHttpInfo
     *
     * addInvoice
     *
     * @param  \Uctoplus\API\Models\AddInvoiceRequest $add_invoice_request Invoice or Credit Note (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addInvoiceAsyncWithHttpInfo($add_invoice_request, $except = null, string $contentType = self::contentTypes['addInvoice'][0])
    {
        $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
        $request = $this->addInvoiceRequest($add_invoice_request, $except, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addInvoice'
     *
     * @param  \Uctoplus\API\Models\AddInvoiceRequest $add_invoice_request Invoice or Credit Note (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addInvoiceRequest($add_invoice_request, $except = null, string $contentType = self::contentTypes['addInvoice'][0])
    {

        // verify the required parameter 'add_invoice_request' is set
        if ($add_invoice_request === null || (is_array($add_invoice_request) && count($add_invoice_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $add_invoice_request when calling addInvoice'
            );
        }



        $resourcePath = '/v3/invoice/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $except,
            'except', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($add_invoice_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($add_invoice_request));
            } else {
                $httpBody = $add_invoice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPaymentToInvoice
     *
     * addPaymentToInvoice
     *
     * @param  int $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Payment $payment Payment (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPaymentToInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR
     */
    public function addPaymentToInvoice($id, $payment, $except = null, string $contentType = self::contentTypes['addPaymentToInvoice'][0])
    {
        list($response) = $this->addPaymentToInvoiceWithHttpInfo($id, $payment, $except, $contentType);
        return $response;
    }

    /**
     * Operation addPaymentToInvoiceWithHttpInfo
     *
     * addPaymentToInvoice
     *
     * @param  int $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Payment $payment Payment (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPaymentToInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPaymentToInvoiceWithHttpInfo($id, $payment, $except = null, string $contentType = self::contentTypes['addPaymentToInvoice'][0])
    {
        $request = $this->addPaymentToInvoiceRequest($id, $payment, $except, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Uctoplus\API\Models\AddInvoice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\AddInvoice200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\AddInvoice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\AddInvoice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPaymentToInvoiceAsync
     *
     * addPaymentToInvoice
     *
     * @param  int $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Payment $payment Payment (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPaymentToInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPaymentToInvoiceAsync($id, $payment, $except = null, string $contentType = self::contentTypes['addPaymentToInvoice'][0])
    {
        return $this->addPaymentToInvoiceAsyncWithHttpInfo($id, $payment, $except, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPaymentToInvoiceAsyncWithHttpInfo
     *
     * addPaymentToInvoice
     *
     * @param  int $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Payment $payment Payment (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPaymentToInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPaymentToInvoiceAsyncWithHttpInfo($id, $payment, $except = null, string $contentType = self::contentTypes['addPaymentToInvoice'][0])
    {
        $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
        $request = $this->addPaymentToInvoiceRequest($id, $payment, $except, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPaymentToInvoice'
     *
     * @param  int $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Payment $payment Payment (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['addPaymentToInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addPaymentToInvoiceRequest($id, $payment, $except = null, string $contentType = self::contentTypes['addPaymentToInvoice'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling addPaymentToInvoice'
            );
        }

        // verify the required parameter 'payment' is set
        if ($payment === null || (is_array($payment) && count($payment) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment when calling addPaymentToInvoice'
            );
        }



        $resourcePath = '/v3/invoice/{id}/pay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $except,
            'except', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($payment)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($payment));
            } else {
                $httpBody = $payment;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInvoice
     *
     * getInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR
     */
    public function getInvoice($id, $except = null, string $contentType = self::contentTypes['getInvoice'][0])
    {
        list($response) = $this->getInvoiceWithHttpInfo($id, $except, $contentType);
        return $response;
    }

    /**
     * Operation getInvoiceWithHttpInfo
     *
     * getInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInvoiceWithHttpInfo($id, $except = null, string $contentType = self::contentTypes['getInvoice'][0])
    {
        $request = $this->getInvoiceRequest($id, $except, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Uctoplus\API\Models\AddInvoice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\AddInvoice200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\AddInvoice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\AddInvoice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInvoiceAsync
     *
     * getInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsync($id, $except = null, string $contentType = self::contentTypes['getInvoice'][0])
    {
        return $this->getInvoiceAsyncWithHttpInfo($id, $except, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInvoiceAsyncWithHttpInfo
     *
     * getInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInvoiceAsyncWithHttpInfo($id, $except = null, string $contentType = self::contentTypes['getInvoice'][0])
    {
        $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
        $request = $this->getInvoiceRequest($id, $except, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInvoice'
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInvoiceRequest($id, $except = null, string $contentType = self::contentTypes['getInvoice'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getInvoice'
            );
        }



        $resourcePath = '/v3/invoice/{id}/get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $except,
            'except', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendInvoice
     *
     * sendInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\SendRequest $send_request Sent document request (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR
     */
    public function sendInvoice($id, $send_request, $except = null, string $contentType = self::contentTypes['sendInvoice'][0])
    {
        list($response) = $this->sendInvoiceWithHttpInfo($id, $send_request, $except, $contentType);
        return $response;
    }

    /**
     * Operation sendInvoiceWithHttpInfo
     *
     * sendInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\SendRequest $send_request Sent document request (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendInvoice'] to see the possible values for this operation
     *
     * @throws \Uctoplus\API\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Uctoplus\API\Models\AddInvoice200Response|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR|\Uctoplus\API\Models\ResponseContentERROR, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendInvoiceWithHttpInfo($id, $send_request, $except = null, string $contentType = self::contentTypes['sendInvoice'][0])
    {
        $request = $this->sendInvoiceRequest($id, $send_request, $except, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\Uctoplus\API\Models\AddInvoice200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\AddInvoice200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\AddInvoice200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\Uctoplus\API\Models\ResponseContentERROR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Uctoplus\API\Models\ResponseContentERROR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Uctoplus\API\Models\ResponseContentERROR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\AddInvoice200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Uctoplus\API\Models\ResponseContentERROR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendInvoiceAsync
     *
     * sendInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\SendRequest $send_request Sent document request (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendInvoiceAsync($id, $send_request, $except = null, string $contentType = self::contentTypes['sendInvoice'][0])
    {
        return $this->sendInvoiceAsyncWithHttpInfo($id, $send_request, $except, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendInvoiceAsyncWithHttpInfo
     *
     * sendInvoice
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\SendRequest $send_request Sent document request (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendInvoiceAsyncWithHttpInfo($id, $send_request, $except = null, string $contentType = self::contentTypes['sendInvoice'][0])
    {
        $returnType = '\Uctoplus\API\Models\AddInvoice200Response';
        $request = $this->sendInvoiceRequest($id, $send_request, $except, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendInvoice'
     *
     * @param  string $id Invoice identifier (required)
     * @param  \Uctoplus\API\Models\SendRequest $send_request Sent document request (required)
     * @param  \Uctoplus\API\Models\Except[] $except Optional arguments for exclude data from response (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendInvoice'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendInvoiceRequest($id, $send_request, $except = null, string $contentType = self::contentTypes['sendInvoice'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling sendInvoice'
            );
        }

        // verify the required parameter 'send_request' is set
        if ($send_request === null || (is_array($send_request) && count($send_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_request when calling sendInvoice'
            );
        }



        $resourcePath = '/v3/invoice/{id}/send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $except,
            'except', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_request));
            } else {
                $httpBody = $send_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $headers['api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
