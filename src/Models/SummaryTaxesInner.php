<?php
/**
 * SummaryTaxesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Účto+ API
 *
 * Production enviroment is located at `https://moje.uctoplus.sk/api/v3/production`.  Sandbox enviroment is located at `https://moje.uctoplus.sk/api/v3/sandbox`.  All comunication with API is encoded in UTF-8. This REST API is based on Open API v3 standard. For help with implementation or access to the test enviroment please contact our helpdesk
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: helpdesk@uctoplus.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Uctoplus\API\Models;

use \ArrayAccess;
use \Uctoplus\API\ObjectSerializer;

/**
 * SummaryTaxesInner Class Doc Comment
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SummaryTaxesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Summary_taxes_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vat_percentage' => 'float',
        'base' => 'float',
        'vat' => 'float',
        'payed' => 'float',
        'payed_vat' => 'float',
        'roundup_base' => 'float',
        'roundup_vat' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vat_percentage' => null,
        'base' => null,
        'vat' => null,
        'payed' => null,
        'payed_vat' => null,
        'roundup_base' => null,
        'roundup_vat' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'vat_percentage' => false,
		'base' => false,
		'vat' => false,
		'payed' => false,
		'payed_vat' => false,
		'roundup_base' => false,
		'roundup_vat' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_percentage' => 'vat_percentage',
        'base' => 'base',
        'vat' => 'vat',
        'payed' => 'payed',
        'payed_vat' => 'payed_vat',
        'roundup_base' => 'roundup_base',
        'roundup_vat' => 'roundup_vat'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_percentage' => 'setVatPercentage',
        'base' => 'setBase',
        'vat' => 'setVat',
        'payed' => 'setPayed',
        'payed_vat' => 'setPayedVat',
        'roundup_base' => 'setRoundupBase',
        'roundup_vat' => 'setRoundupVat'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_percentage' => 'getVatPercentage',
        'base' => 'getBase',
        'vat' => 'getVat',
        'payed' => 'getPayed',
        'payed_vat' => 'getPayedVat',
        'roundup_base' => 'getRoundupBase',
        'roundup_vat' => 'getRoundupVat'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('vat_percentage', $data ?? [], null);
        $this->setIfExists('base', $data ?? [], null);
        $this->setIfExists('vat', $data ?? [], null);
        $this->setIfExists('payed', $data ?? [], null);
        $this->setIfExists('payed_vat', $data ?? [], null);
        $this->setIfExists('roundup_base', $data ?? [], null);
        $this->setIfExists('roundup_vat', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_percentage
     *
     * @return float|null
     */
    public function getVatPercentage()
    {
        return $this->container['vat_percentage'];
    }

    /**
     * Sets vat_percentage
     *
     * @param float|null $vat_percentage vat_percentage
     *
     * @return self
     */
    public function setVatPercentage($vat_percentage)
    {

        if (is_null($vat_percentage)) {
            throw new \InvalidArgumentException('non-nullable vat_percentage cannot be null');
        }

        $this->container['vat_percentage'] = $vat_percentage;

        return $this;
    }

    /**
     * Gets base
     *
     * @return float|null
     */
    public function getBase()
    {
        return $this->container['base'];
    }

    /**
     * Sets base
     *
     * @param float|null $base base
     *
     * @return self
     */
    public function setBase($base)
    {

        if (is_null($base)) {
            throw new \InvalidArgumentException('non-nullable base cannot be null');
        }

        $this->container['base'] = $base;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return float|null
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param float|null $vat vat
     *
     * @return self
     */
    public function setVat($vat)
    {

        if (is_null($vat)) {
            throw new \InvalidArgumentException('non-nullable vat cannot be null');
        }

        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets payed
     *
     * @return float|null
     */
    public function getPayed()
    {
        return $this->container['payed'];
    }

    /**
     * Sets payed
     *
     * @param float|null $payed payed
     *
     * @return self
     */
    public function setPayed($payed)
    {

        if (is_null($payed)) {
            throw new \InvalidArgumentException('non-nullable payed cannot be null');
        }

        $this->container['payed'] = $payed;

        return $this;
    }

    /**
     * Gets payed_vat
     *
     * @return float|null
     */
    public function getPayedVat()
    {
        return $this->container['payed_vat'];
    }

    /**
     * Sets payed_vat
     *
     * @param float|null $payed_vat payed_vat
     *
     * @return self
     */
    public function setPayedVat($payed_vat)
    {

        if (is_null($payed_vat)) {
            throw new \InvalidArgumentException('non-nullable payed_vat cannot be null');
        }

        $this->container['payed_vat'] = $payed_vat;

        return $this;
    }

    /**
     * Gets roundup_base
     *
     * @return float|null
     */
    public function getRoundupBase()
    {
        return $this->container['roundup_base'];
    }

    /**
     * Sets roundup_base
     *
     * @param float|null $roundup_base roundup_base
     *
     * @return self
     */
    public function setRoundupBase($roundup_base)
    {

        if (is_null($roundup_base)) {
            throw new \InvalidArgumentException('non-nullable roundup_base cannot be null');
        }

        $this->container['roundup_base'] = $roundup_base;

        return $this;
    }

    /**
     * Gets roundup_vat
     *
     * @return float|null
     */
    public function getRoundupVat()
    {
        return $this->container['roundup_vat'];
    }

    /**
     * Sets roundup_vat
     *
     * @param float|null $roundup_vat roundup_vat
     *
     * @return self
     */
    public function setRoundupVat($roundup_vat)
    {

        if (is_null($roundup_vat)) {
            throw new \InvalidArgumentException('non-nullable roundup_vat cannot be null');
        }

        $this->container['roundup_vat'] = $roundup_vat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


