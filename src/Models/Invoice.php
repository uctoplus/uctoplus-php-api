<?php
/**
 * Invoice
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Účto+ API
 *
 * Production enviroment is located at `https://moje.uctoplus.sk/api/v3/production`.  Sandbox enviroment is located at `https://moje.uctoplus.sk/api/v3/sandbox`.  All comunication with API is encoded in UTF-8. This REST API is based on Open API v3 standard. For help with implementation or access to the test enviroment please contact our helpdesk
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: helpdesk@uctoplus.sk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Uctoplus\API\Models;

use \ArrayAccess;
use \Uctoplus\API\ObjectSerializer;

/**
 * Invoice Class Doc Comment
 *
 * @category Class
 * @package  Uctoplus\API
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Invoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Invoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'invoice_number' => 'string',
        'invoice_type' => '\Uctoplus\API\Models\InvoiceType',
        'reciever' => '\Uctoplus\API\Models\Address',
        'delivery_address' => '\Uctoplus\API\Models\DeliveryAddress',
        'internal_description' => 'string',
        'variable_symbol' => 'string',
        'konstantny_symbol' => 'string',
        'specificky_symbol' => 'string',
        'e2e_reference' => 'string',
        'date_issue' => '\DateTime',
        'date_delivery' => '\DateTime',
        'date_due' => '\DateTime',
        'currency' => 'string',
        'issuer' => '\Uctoplus\API\Models\Issuer',
        'language' => '\Uctoplus\API\Models\Language',
        'note1' => 'string',
        'note2' => 'string',
        'note3' => 'string',
        'logo_version' => '\Uctoplus\API\Models\Logo',
        'signature_version' => '\Uctoplus\API\Models\Signature',
        'template_id' => 'int',
        'delivery_type' => '\Uctoplus\API\Models\DeliveryType',
        'payment_type' => '\Uctoplus\API\Models\PaymentType',
        'currency2' => '\Uctoplus\API\Models\InvoiceCurrency2',
        'items' => '\Uctoplus\API\Models\InvoiceItem[]',
        'tags' => '\Uctoplus\API\Models\Tag[]',
        'reverse_charge' => 'bool',
        'discount' => 'float',
        'discount_type' => 'float',
        'payment' => '\Uctoplus\API\Models\Payment',
        'file' => '\Uctoplus\API\Models\File',
        'moje_uctoplus_url' => 'string',
        'moje_uctoplus_add_url' => 'string',
        'summary' => '\Uctoplus\API\Models\Summary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'invoice_number' => null,
        'invoice_type' => null,
        'reciever' => null,
        'delivery_address' => null,
        'internal_description' => null,
        'variable_symbol' => null,
        'konstantny_symbol' => null,
        'specificky_symbol' => null,
        'e2e_reference' => null,
        'date_issue' => 'date',
        'date_delivery' => 'date',
        'date_due' => 'date',
        'currency' => null,
        'issuer' => null,
        'language' => null,
        'note1' => null,
        'note2' => null,
        'note3' => null,
        'logo_version' => null,
        'signature_version' => null,
        'template_id' => null,
        'delivery_type' => null,
        'payment_type' => null,
        'currency2' => null,
        'items' => null,
        'tags' => null,
        'reverse_charge' => null,
        'discount' => null,
        'discount_type' => null,
        'payment' => null,
        'file' => null,
        'moje_uctoplus_url' => null,
        'moje_uctoplus_add_url' => null,
        'summary' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'invoice_number' => false,
		'invoice_type' => false,
		'reciever' => false,
		'delivery_address' => false,
		'internal_description' => true,
		'variable_symbol' => true,
		'konstantny_symbol' => true,
		'specificky_symbol' => true,
		'e2e_reference' => true,
		'date_issue' => false,
		'date_delivery' => false,
		'date_due' => false,
		'currency' => false,
		'issuer' => false,
		'language' => false,
		'note1' => true,
		'note2' => true,
		'note3' => true,
		'logo_version' => false,
		'signature_version' => false,
		'template_id' => true,
		'delivery_type' => false,
		'payment_type' => false,
		'currency2' => true,
		'items' => false,
		'tags' => false,
		'reverse_charge' => false,
		'discount' => false,
		'discount_type' => false,
		'payment' => false,
		'file' => false,
		'moje_uctoplus_url' => false,
		'moje_uctoplus_add_url' => false,
		'summary' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'invoice_number' => 'invoiceNumber',
        'invoice_type' => 'invoiceType',
        'reciever' => 'reciever',
        'delivery_address' => 'deliveryAddress',
        'internal_description' => 'internalDescription',
        'variable_symbol' => 'variableSymbol',
        'konstantny_symbol' => 'konstantnySymbol',
        'specificky_symbol' => 'specifickySymbol',
        'e2e_reference' => 'e2eReference',
        'date_issue' => 'dateIssue',
        'date_delivery' => 'dateDelivery',
        'date_due' => 'dateDue',
        'currency' => 'currency',
        'issuer' => 'issuer',
        'language' => 'language',
        'note1' => 'note1',
        'note2' => 'note2',
        'note3' => 'note3',
        'logo_version' => 'logoVersion',
        'signature_version' => 'signatureVersion',
        'template_id' => 'templateId',
        'delivery_type' => 'deliveryType',
        'payment_type' => 'paymentType',
        'currency2' => 'currency2',
        'items' => 'items',
        'tags' => 'tags',
        'reverse_charge' => 'reverseCharge',
        'discount' => 'discount',
        'discount_type' => 'discountType',
        'payment' => 'payment',
        'file' => 'file',
        'moje_uctoplus_url' => 'mojeUctoplusUrl',
        'moje_uctoplus_add_url' => 'mojeUctoplusAddUrl',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_type' => 'setInvoiceType',
        'reciever' => 'setReciever',
        'delivery_address' => 'setDeliveryAddress',
        'internal_description' => 'setInternalDescription',
        'variable_symbol' => 'setVariableSymbol',
        'konstantny_symbol' => 'setKonstantnySymbol',
        'specificky_symbol' => 'setSpecifickySymbol',
        'e2e_reference' => 'setE2eReference',
        'date_issue' => 'setDateIssue',
        'date_delivery' => 'setDateDelivery',
        'date_due' => 'setDateDue',
        'currency' => 'setCurrency',
        'issuer' => 'setIssuer',
        'language' => 'setLanguage',
        'note1' => 'setNote1',
        'note2' => 'setNote2',
        'note3' => 'setNote3',
        'logo_version' => 'setLogoVersion',
        'signature_version' => 'setSignatureVersion',
        'template_id' => 'setTemplateId',
        'delivery_type' => 'setDeliveryType',
        'payment_type' => 'setPaymentType',
        'currency2' => 'setCurrency2',
        'items' => 'setItems',
        'tags' => 'setTags',
        'reverse_charge' => 'setReverseCharge',
        'discount' => 'setDiscount',
        'discount_type' => 'setDiscountType',
        'payment' => 'setPayment',
        'file' => 'setFile',
        'moje_uctoplus_url' => 'setMojeUctoplusUrl',
        'moje_uctoplus_add_url' => 'setMojeUctoplusAddUrl',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_type' => 'getInvoiceType',
        'reciever' => 'getReciever',
        'delivery_address' => 'getDeliveryAddress',
        'internal_description' => 'getInternalDescription',
        'variable_symbol' => 'getVariableSymbol',
        'konstantny_symbol' => 'getKonstantnySymbol',
        'specificky_symbol' => 'getSpecifickySymbol',
        'e2e_reference' => 'getE2eReference',
        'date_issue' => 'getDateIssue',
        'date_delivery' => 'getDateDelivery',
        'date_due' => 'getDateDue',
        'currency' => 'getCurrency',
        'issuer' => 'getIssuer',
        'language' => 'getLanguage',
        'note1' => 'getNote1',
        'note2' => 'getNote2',
        'note3' => 'getNote3',
        'logo_version' => 'getLogoVersion',
        'signature_version' => 'getSignatureVersion',
        'template_id' => 'getTemplateId',
        'delivery_type' => 'getDeliveryType',
        'payment_type' => 'getPaymentType',
        'currency2' => 'getCurrency2',
        'items' => 'getItems',
        'tags' => 'getTags',
        'reverse_charge' => 'getReverseCharge',
        'discount' => 'getDiscount',
        'discount_type' => 'getDiscountType',
        'payment' => 'getPayment',
        'file' => 'getFile',
        'moje_uctoplus_url' => 'getMojeUctoplusUrl',
        'moje_uctoplus_add_url' => 'getMojeUctoplusAddUrl',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('reciever', $data ?? [], null);
        $this->setIfExists('delivery_address', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('variable_symbol', $data ?? [], null);
        $this->setIfExists('konstantny_symbol', $data ?? [], null);
        $this->setIfExists('specificky_symbol', $data ?? [], null);
        $this->setIfExists('e2e_reference', $data ?? [], null);
        $this->setIfExists('date_issue', $data ?? [], null);
        $this->setIfExists('date_delivery', $data ?? [], null);
        $this->setIfExists('date_due', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], 'EUR');
        $this->setIfExists('issuer', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('note1', $data ?? [], null);
        $this->setIfExists('note2', $data ?? [], null);
        $this->setIfExists('note3', $data ?? [], null);
        $this->setIfExists('logo_version', $data ?? [], null);
        $this->setIfExists('signature_version', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('currency2', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('reverse_charge', $data ?? [], false);
        $this->setIfExists('discount', $data ?? [], 0.0);
        $this->setIfExists('discount_type', $data ?? [], 0);
        $this->setIfExists('payment', $data ?? [], null);
        $this->setIfExists('file', $data ?? [], null);
        $this->setIfExists('moje_uctoplus_url', $data ?? [], null);
        $this->setIfExists('moje_uctoplus_add_url', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['items']) && (count($this->container['items']) < 1)) {
            $invalidProperties[] = "invalid value for 'items', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string|null $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \Uctoplus\API\Models\InvoiceType|null
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \Uctoplus\API\Models\InvoiceType|null $invoice_type invoice_type
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets reciever
     *
     * @return \Uctoplus\API\Models\Address|null
     */
    public function getReciever()
    {
        return $this->container['reciever'];
    }

    /**
     * Sets reciever
     *
     * @param \Uctoplus\API\Models\Address|null $reciever reciever
     *
     * @return self
     */
    public function setReciever($reciever)
    {
        if (is_null($reciever)) {
            throw new \InvalidArgumentException('non-nullable reciever cannot be null');
        }
        $this->container['reciever'] = $reciever;

        return $this;
    }

    /**
     * Gets delivery_address
     *
     * @return \Uctoplus\API\Models\DeliveryAddress|null
     */
    public function getDeliveryAddress()
    {
        return $this->container['delivery_address'];
    }

    /**
     * Sets delivery_address
     *
     * @param \Uctoplus\API\Models\DeliveryAddress|null $delivery_address delivery_address
     *
     * @return self
     */
    public function setDeliveryAddress($delivery_address)
    {
        if (is_null($delivery_address)) {
            throw new \InvalidArgumentException('non-nullable delivery_address cannot be null');
        }
        $this->container['delivery_address'] = $delivery_address;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description internal_description
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            array_push($this->openAPINullablesSetToNull, 'internal_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets variable_symbol
     *
     * @return string|null
     */
    public function getVariableSymbol()
    {
        return $this->container['variable_symbol'];
    }

    /**
     * Sets variable_symbol
     *
     * @param string|null $variable_symbol variable_symbol
     *
     * @return self
     */
    public function setVariableSymbol($variable_symbol)
    {
        if (is_null($variable_symbol)) {
            array_push($this->openAPINullablesSetToNull, 'variable_symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('variable_symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['variable_symbol'] = $variable_symbol;

        return $this;
    }

    /**
     * Gets konstantny_symbol
     *
     * @return string|null
     */
    public function getKonstantnySymbol()
    {
        return $this->container['konstantny_symbol'];
    }

    /**
     * Sets konstantny_symbol
     *
     * @param string|null $konstantny_symbol konstantny_symbol
     *
     * @return self
     */
    public function setKonstantnySymbol($konstantny_symbol)
    {
        if (is_null($konstantny_symbol)) {
            array_push($this->openAPINullablesSetToNull, 'konstantny_symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('konstantny_symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['konstantny_symbol'] = $konstantny_symbol;

        return $this;
    }

    /**
     * Gets specificky_symbol
     *
     * @return string|null
     */
    public function getSpecifickySymbol()
    {
        return $this->container['specificky_symbol'];
    }

    /**
     * Sets specificky_symbol
     *
     * @param string|null $specificky_symbol specificky_symbol
     *
     * @return self
     */
    public function setSpecifickySymbol($specificky_symbol)
    {
        if (is_null($specificky_symbol)) {
            array_push($this->openAPINullablesSetToNull, 'specificky_symbol');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('specificky_symbol', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['specificky_symbol'] = $specificky_symbol;

        return $this;
    }

    /**
     * Gets e2e_reference
     *
     * @return string|null
     */
    public function getE2eReference()
    {
        return $this->container['e2e_reference'];
    }

    /**
     * Sets e2e_reference
     *
     * @param string|null $e2e_reference e2e_reference
     *
     * @return self
     */
    public function setE2eReference($e2e_reference)
    {
        if (is_null($e2e_reference)) {
            array_push($this->openAPINullablesSetToNull, 'e2e_reference');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('e2e_reference', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['e2e_reference'] = $e2e_reference;

        return $this;
    }

    /**
     * Gets date_issue
     *
     * @return \DateTime|null
     */
    public function getDateIssue()
    {
        return $this->container['date_issue'];
    }

    /**
     * Sets date_issue
     *
     * @param \DateTime|null $date_issue Date in format parsable by PHP DateTime Class (eg.: yyyy-mm-dd)
     *
     * @return self
     */
    public function setDateIssue($date_issue)
    {
        if (is_null($date_issue)) {
            throw new \InvalidArgumentException('non-nullable date_issue cannot be null');
        }
        $this->container['date_issue'] = $date_issue;

        return $this;
    }

    /**
     * Gets date_delivery
     *
     * @return \DateTime|null
     */
    public function getDateDelivery()
    {
        return $this->container['date_delivery'];
    }

    /**
     * Sets date_delivery
     *
     * @param \DateTime|null $date_delivery Date in format parsable by PHP DateTime Class (eg.: yyyy-mm-dd)
     *
     * @return self
     */
    public function setDateDelivery($date_delivery)
    {
        if (is_null($date_delivery)) {
            throw new \InvalidArgumentException('non-nullable date_delivery cannot be null');
        }
        $this->container['date_delivery'] = $date_delivery;

        return $this;
    }

    /**
     * Gets date_due
     *
     * @return \DateTime|null
     */
    public function getDateDue()
    {
        return $this->container['date_due'];
    }

    /**
     * Sets date_due
     *
     * @param \DateTime|null $date_due Date in format parsable by PHP DateTime Class (eg.: yyyy-mm-dd)
     *
     * @return self
     */
    public function setDateDue($date_due)
    {
        if (is_null($date_due)) {
            throw new \InvalidArgumentException('non-nullable date_due cannot be null');
        }
        $this->container['date_due'] = $date_due;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Currency of invoice, format corresponds to [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return \Uctoplus\API\Models\Issuer|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param \Uctoplus\API\Models\Issuer|null $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        if (is_null($issuer)) {
            throw new \InvalidArgumentException('non-nullable issuer cannot be null');
        }
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Uctoplus\API\Models\Language|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Uctoplus\API\Models\Language|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets note1
     *
     * @return string|null
     */
    public function getNote1()
    {
        return $this->container['note1'];
    }

    /**
     * Sets note1
     *
     * @param string|null $note1 Markdown language allowed.
     *
     * @return self
     */
    public function setNote1($note1)
    {
        if (is_null($note1)) {
            array_push($this->openAPINullablesSetToNull, 'note1');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note1', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note1'] = $note1;

        return $this;
    }

    /**
     * Gets note2
     *
     * @return string|null
     */
    public function getNote2()
    {
        return $this->container['note2'];
    }

    /**
     * Sets note2
     *
     * @param string|null $note2 Markdown language allowed.
     *
     * @return self
     */
    public function setNote2($note2)
    {
        if (is_null($note2)) {
            array_push($this->openAPINullablesSetToNull, 'note2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note2'] = $note2;

        return $this;
    }

    /**
     * Gets note3
     *
     * @return string|null
     */
    public function getNote3()
    {
        return $this->container['note3'];
    }

    /**
     * Sets note3
     *
     * @param string|null $note3 Markdown language allowed.
     *
     * @return self
     */
    public function setNote3($note3)
    {
        if (is_null($note3)) {
            array_push($this->openAPINullablesSetToNull, 'note3');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note3', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note3'] = $note3;

        return $this;
    }

    /**
     * Gets logo_version
     *
     * @return \Uctoplus\API\Models\Logo|null
     */
    public function getLogoVersion()
    {
        return $this->container['logo_version'];
    }

    /**
     * Sets logo_version
     *
     * @param \Uctoplus\API\Models\Logo|null $logo_version logo_version
     *
     * @return self
     */
    public function setLogoVersion($logo_version)
    {
        if (is_null($logo_version)) {
            throw new \InvalidArgumentException('non-nullable logo_version cannot be null');
        }
        $this->container['logo_version'] = $logo_version;

        return $this;
    }

    /**
     * Gets signature_version
     *
     * @return \Uctoplus\API\Models\Signature|null
     */
    public function getSignatureVersion()
    {
        return $this->container['signature_version'];
    }

    /**
     * Sets signature_version
     *
     * @param \Uctoplus\API\Models\Signature|null $signature_version signature_version
     *
     * @return self
     */
    public function setSignatureVersion($signature_version)
    {
        if (is_null($signature_version)) {
            throw new \InvalidArgumentException('non-nullable signature_version cannot be null');
        }
        $this->container['signature_version'] = $signature_version;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int|null $template_id ID from [Účto+](https://moje.uctoplus.sk)
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            array_push($this->openAPINullablesSetToNull, 'template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return \Uctoplus\API\Models\DeliveryType|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param \Uctoplus\API\Models\DeliveryType|null $delivery_type delivery_type
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {
        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Uctoplus\API\Models\PaymentType|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Uctoplus\API\Models\PaymentType|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets currency2
     *
     * @return \Uctoplus\API\Models\InvoiceCurrency2|null
     */
    public function getCurrency2()
    {
        return $this->container['currency2'];
    }

    /**
     * Sets currency2
     *
     * @param \Uctoplus\API\Models\InvoiceCurrency2|null $currency2 currency2
     *
     * @return self
     */
    public function setCurrency2($currency2)
    {
        if (is_null($currency2)) {
            array_push($this->openAPINullablesSetToNull, 'currency2');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency2', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['currency2'] = $currency2;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Uctoplus\API\Models\InvoiceItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Uctoplus\API\Models\InvoiceItem[]|null $items Items in invoice
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }


        if ((count($items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $items when calling Invoice., number of items must be greater than or equal to 1.');
        }
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Uctoplus\API\Models\Tag[]|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Uctoplus\API\Models\Tag[]|null $tags Tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            throw new \InvalidArgumentException('non-nullable tags cannot be null');
        }
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets reverse_charge
     *
     * @return bool|null
     */
    public function getReverseCharge()
    {
        return $this->container['reverse_charge'];
    }

    /**
     * Sets reverse_charge
     *
     * @param bool|null $reverse_charge reverse_charge
     *
     * @return self
     */
    public function setReverseCharge($reverse_charge)
    {
        if (is_null($reverse_charge)) {
            throw new \InvalidArgumentException('non-nullable reverse_charge cannot be null');
        }
        $this->container['reverse_charge'] = $reverse_charge;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return float|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param float|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return float|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param float|null $discount_type 0 - none 1 - percentage of price
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if (is_null($discount_type)) {
            throw new \InvalidArgumentException('non-nullable discount_type cannot be null');
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Uctoplus\API\Models\Payment|null
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Uctoplus\API\Models\Payment|null $payment payment
     *
     * @return self
     */
    public function setPayment($payment)
    {
        if (is_null($payment)) {
            throw new \InvalidArgumentException('non-nullable payment cannot be null');
        }
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets file
     *
     * @return \Uctoplus\API\Models\File|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param \Uctoplus\API\Models\File|null $file file
     *
     * @return self
     */
    public function setFile($file)
    {
        if (is_null($file)) {
            throw new \InvalidArgumentException('non-nullable file cannot be null');
        }
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets moje_uctoplus_url
     *
     * @return string|null
     */
    public function getMojeUctoplusUrl()
    {
        return $this->container['moje_uctoplus_url'];
    }

    /**
     * Sets moje_uctoplus_url
     *
     * @param string|null $moje_uctoplus_url moje_uctoplus_url
     *
     * @return self
     */
    public function setMojeUctoplusUrl($moje_uctoplus_url)
    {
        if (is_null($moje_uctoplus_url)) {
            throw new \InvalidArgumentException('non-nullable moje_uctoplus_url cannot be null');
        }
        $this->container['moje_uctoplus_url'] = $moje_uctoplus_url;

        return $this;
    }

    /**
     * Gets moje_uctoplus_add_url
     *
     * @return string|null
     */
    public function getMojeUctoplusAddUrl()
    {
        return $this->container['moje_uctoplus_add_url'];
    }

    /**
     * Sets moje_uctoplus_add_url
     *
     * @param string|null $moje_uctoplus_add_url moje_uctoplus_add_url
     *
     * @return self
     */
    public function setMojeUctoplusAddUrl($moje_uctoplus_add_url)
    {
        if (is_null($moje_uctoplus_add_url)) {
            throw new \InvalidArgumentException('non-nullable moje_uctoplus_add_url cannot be null');
        }
        $this->container['moje_uctoplus_add_url'] = $moje_uctoplus_add_url;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Uctoplus\API\Models\Summary|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Uctoplus\API\Models\Summary|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
        }
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


